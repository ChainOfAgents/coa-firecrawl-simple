steps:
  # Create a Cloud Storage bucket for build artifacts if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil mb -p ${PROJECT_ID} gs://${PROJECT_ID}-build-artifacts || echo "Bucket already exists"
  
  # Create a Cloud Tasks queue if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud tasks queues describe crawlweb-tasks-queue --location=${_REGION} || \
        gcloud tasks queues create crawlweb-tasks-queue \
          --location=${_REGION} \
          --max-dispatches-per-second=500 \
          --max-concurrent-dispatches=1000 \
          --max-attempts=100
  
  # Ensure the service account has Cloud Tasks Admin permissions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud projects add-iam-policy-binding ${PROJECT_ID} \
          --member="serviceAccount:crawlweb-sa@${PROJECT_ID}.iam.gserviceaccount.com" \
          --role="roles/cloudtasks.admin" || echo "IAM binding already exists"

  # Ensure the service account has Firestore Admin permissions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud projects add-iam-policy-binding ${PROJECT_ID} \
          --member="serviceAccount:crawlweb-sa@${PROJECT_ID}.iam.gserviceaccount.com" \
          --role="roles/datastore.owner" || echo "Firestore IAM binding already exists"

  # Grant the Cloud Tasks service account permission to invoke the worker service
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the project number
        PROJECT_NUMBER=$(gcloud projects describe ${PROJECT_ID} --format="value(projectNumber)")
        
        # Grant the Cloud Tasks service account the run.invoker role on the worker service
        gcloud run services add-iam-policy-binding worker-service-firecrawl-simple \
          --member="serviceAccount:service-$${PROJECT_NUMBER}@gcp-sa-cloudtasks.iam.gserviceaccount.com" \
          --role="roles/run.invoker" \
          --region=${_REGION} || echo "Cloud Tasks invoker binding already exists"
        
        # Also grant the Cloud Tasks service account the run.invoker role on the Ulixee service
        gcloud run services add-iam-policy-binding ulixee-service-firecrawl-simple \
          --member="serviceAccount:crawlweb-sa@${PROJECT_ID}.iam.gserviceaccount.com" \
          --role="roles/run.invoker" \
          --region=${_REGION} || echo "Ulixee service invoker binding already exists"

  # Create a Cloud Scheduler job for health checks
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud scheduler jobs describe crawlweb-healthcheck --location=${_REGION} || \
        gcloud scheduler jobs create http crawlweb-healthcheck \
          --location=${_REGION} \
          --schedule="*/5 * * * *" \
          --uri="https://api-service-firecrawl-simple-${PROJECT_ID}.${_REGION}.run.app/v1/health/liveness" \
          --http-method=GET

substitutions:
  _REGION: us-west2

options:
  logging: CLOUD_LOGGING_ONLY
